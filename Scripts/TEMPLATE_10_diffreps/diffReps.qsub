#!/bin/bash -l
set -eu
##################################################################################
#Andy Rampersaud, 09.26.18
#This script is called by diffReps.sh
##################################################################################
# Specify which shell to use
#$ -S /bin/bash
#$ -cwd
#$ -j y
#$ -pe omp 16
#Initialize variables from diffReps.sh
##################################################################################

#checking the command line arg
#-ne : "is not equal to"
if [ $# -ne 9 ] ; then
    echo "Need 9 arguments for the qsub command:"
    echo "qsub -N ${Job_Name}'_diffReps_'${COMPAR_NUM} -P waxmanlab -q !linga diffReps.qsub ${Dataset_DIR} ${Dataset_Label} ${Control_Samples_NAME} ${Treatment_Samples_NAME} ${COMPAR_NUM} ${WINDOW_SIZE} ${FRAG_SIZE} ${Input_Sites_RiPPM} ${SCRIPT_DIR}"
    exit 0
fi

#process the command line arguments
Dataset_DIR=$1
Dataset_Label=$2
Control_Samples_NAME=$3
Treatment_Samples_NAME=$4
COMPAR_NUM=$5
WINDOW_SIZE=$6
FRAG_SIZE=$7
Input_Sites_RiPPM=$8
SCRIPT_DIR=$9


#Check that each variable prints a value to the terminal:
echo "Dataset_DIR: ${Dataset_DIR}"
echo "Dataset_Label: ${Dataset_Label}"
echo "Control_Samples_NAME: ${Control_Samples_NAME}"
echo "Treatment_Samples_NAME: ${Treatment_Samples_NAME}"
echo "COMPAR_NUM: ${COMPAR_NUM}"
echo "WINDOW_SIZE: ${WINDOW_SIZE}"
echo "FRAG_SIZE: ${FRAG_SIZE}"
echo "Input_Sites_RiPPM: ${Input_Sites_RiPPM}"
echo "SCRIPT_DIR: ${SCRIPT_DIR}"


echo "=========================================================="
Start_Time=$(date +"%s")
echo "Starting on : $(date)"
echo "Running on node : $(hostname)"
echo "Current directory : $(pwd)"
echo "Current job ID : $JOB_ID"
echo "Current job name : $JOB_NAME"
echo "Task index number : $SGE_TASK_ID"
echo "Parameter for multiple cores : $NSLOTS"
echo "=========================================================="

# Go to local scratch directory
cd ${TMPDIR}
echo $TMPDIR

## bedtools is required for diffReps
module load bedtools

## load conda environment for diffReps
echo "Activating conda environment"
set +eu
module load miniconda
conda activate /projectnb/wax-es/routines/condaenv/perlenv
set -eu

#Output dir:
OUTPUT_DIR="${SCRIPT_DIR}/Output_diffReps"

#Using an if statement to make the output folder if it does not exists
mkdir -p $OUTPUT_DIR

#Copy over text files indicating control and treatment samples:
cp ${SCRIPT_DIR}/Control_Samples.txt .
cp ${SCRIPT_DIR}/Treatment_Samples.txt .

set +eu
## copying norm factors for diffReps if exist
cp ${SCRIPT_DIR}/norm.txt .
set -eu

#Note:
#"Up" events will be when Treatment>Control
#"Down" events will be when Treatment<Control

#Use text files to indicate Control and Treatment samples
#Control_Samples.txt
#Treatment_Samples.txt

echo 'Copy control sample BAM files to Control folder'
mkdir -p Input/Control
tail -n +2 Control_Samples.txt > Control_Samples.temp
while IFS=$'\t' read -r -a myArray
do
    Sample_DIR=${myArray[0]}
    Sample_ID=${myArray[1]}
    Description=${myArray[2]}
    cp ${Dataset_DIR}/${Sample_ID}/fastq/bowtie2/${Sample_ID}'_fragments.bed.gz' ./Input/Control
done < Control_Samples.temp
rm Control_Samples.temp

echo 'Copy treatment sample BAM files to Treatment folder'
mkdir -p Input/Treatment
tail -n +2 Treatment_Samples.txt > Treatment_Samples.temp
while IFS=$'\t' read -r -a myArray
do
    Sample_DIR=${myArray[0]}
    Sample_ID=${myArray[1]}
    Description=${myArray[2]}
    cp ${Dataset_DIR}/${Sample_ID}/fastq/bowtie2/${Sample_ID}'_fragments.bed.gz' ./Input/Treatment
done < Treatment_Samples.temp
rm Treatment_Samples.temp

echo 'Start: BED file check'

echo 'Check the BED file(s) read count:'
echo 'Remember:'
echo 'For differential analysis jobs you want to use the full data (not the subset test data)'
echo 'Otherwise job/commands will fail.'
echo 'Check the BED file(s) column count:'
echo 'Need to have BED files with 6 columns'

cd Input
for folder in Control Treatment
do 
    pushd $folder
    BED_List=*.bed.gz
    for c in ${BED_List}
    do
        BED_Name=${c%\.bed.gz}
        gzip -d ${BED_Name}'.bed.gz'
        Line_Count=$(wc -l < ${BED_Name}'.bed') 
        Column_Count=$(awk -F'\t' '{print NF; exit}' ${BED_Name}'.bed')

        echo ${BED_Name}'.bed column count:'
        echo ${Column_Count}

        #Need an if statement to deal with BED3 -> BED6 file conversions
        if [ ${Column_Count} -eq 3 ] ; 
        then
            echo "BED files have 3 columns. Start: convert BED3 to BED6 format"

            awk -v BED_Name="${BED_Name}" '{print $1"\t"$2"\t"$3"\t"BED_Name"\t"1000"\t""."}' ${BED_Name}'.bed' > ${BED_Name}'.temp1'
            mv ${BED_Name}'.temp1' ${BED_Name}'.bed'
            Column_Count=$(awk -F'\t' '{print NF; exit}' ${BED_Name}'.bed')
            echo "${BED_Name}.bed column count: ${Column_Count}"

            echo "Done: convert BED3 to BED6 format"
        fi
        
        Line_Count_Formatted=$(echo ${Line_Count} | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        echo "${BED_Name}.bed line count: ${Line_Count_Formatted}"
    done
    popd
done

echo 'End: BED file check'

echo 'Number of replicates in each condition:'

pushd ${TMPDIR}/Input/Control
NUM_REP_Control=$(ls -l | grep '.bed' | wc -l)
echo 'NUM_REP_Control: '$NUM_REP_Control
popd

pushd ${TMPDIR}/Input/Treatment
NUM_REP_Treatment=$(ls -l | grep '.bed' | wc -l)
echo 'NUM_REP_Treatment: '$NUM_REP_Treatment
popd

#----------------------------------------------------------------------------------
#Need to check if NUM_REP_CONDITION* equals 1
#If there's only 1 replicate (1 sample):
#------------------------------------------
if [ "${NUM_REP_Control}" == "1" ] || [ "${NUM_REP_Treatment}" == "1" ] ;
then
    echo "WARNING:"
    echo "Either your Control and/or Treatment has only 1 sample (no replicates)"
    echo "Note about n=1 comparisons (only 1 sample per condition)"
    echo "If the user tries to give diffReps conditions with only 1 sample it returns the following:"
    echo "To use Negative Binomial, you must have at least two replicates per condition."
    echo "Use G-test(preferred) or Chisquare test instead. Exit."
    echo "A modified diffReps command will be used for this analysis (using the G-test statistics)"
fi
echo "=========================================================="

#Change dir back to scratch dir
cd ${TMPDIR}

echo 'Save Control and Treatment file lists to variables'

pushd Input/Control
Control_List=$(ls -l *.bed| awk '{print $9}' | sort -t "M" -k2 -n | tr "\n" " ")
echo 'Control_List:'
echo $Control_List

#Need to move bed files to same dir as Perl script
mv *.bed ../../
popd 

pushd Input/Treatment
Treatment_List=$(ls -l *.bed| awk '{print $9}' | sort -t "M" -k2 -n | tr "\n" " ")
echo 'Treatment_List:'
echo $Treatment_List
#Need to move bed files to same dir as Perl script
mv *.bed ../../
popd

echo 'List files in scratch directory:'
ls -alh
tree
echo 'Starting to run my commands'

# run my commands.
echo 'Starting diffReps.pl'

#Regarding diffReps options:
#https://groups.google.com/forum/?hl=en#!searchin/diffreps-discuss/fragment$20size/diffreps-discuss/YdM_uY7klZY/B7bDORP-0jQJ
#p.s.: if you don't want to do any shift, you can set fragment size to 0. 
#For our DHS data, we don't want any read shifting

#Also for data of sharp peaks:
#http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3677880/
#“–nsd” option (see Design and Implementation) is set to “sharp” because H3K4me3 tends to generate sharp peaks.

#Increasing the “–nsd” means filtering more windows with small read counts
#This should eliminate BG regions
#Turns out "--nsd sharp" greatly reduces the number of differential sites
#I'll use "--nsd broad"

#Try manually setting the window and step size (instead of using --mode n)
#Use $NSLOTS env. variable to use multiple cores

report_name="diffReps_${Treatment_Samples_NAME}.vs.${Control_Samples_NAME}"

# if [ "${NUM_REP_Control}" == "1" ] || [ "${NUM_REP_Treatment}" == "1" ]; then
#     if [ -f "norm.txt" ]; then
#         (cpanm --local-lib=~/perl5 local::lib && eval $(perl -I ~/perl5/lib/perl5/ -Mlocal::lib); set -x; time ~/perl5/bin/diffReps.pl --treatment $Treatment_List --control $Control_List --report ${report_name} --gname mm9 --window ${WINDOW_SIZE} --nsd broad --frag ${FRAG_SIZE} --nproc $NSLOTS --meth gt --norm "norm.txt")
#     else
#         (cpanm --local-lib=~/perl5 local::lib && eval $(perl -I ~/perl5/lib/perl5/ -Mlocal::lib); set -x; time ~/perl5/bin/diffReps.pl --treatment $Treatment_List --control $Control_List --report ${report_name} --gname mm9 --window ${WINDOW_SIZE} --nsd broad --frag ${FRAG_SIZE} --nproc $NSLOTS --meth gt)
#     fi
# else
#     if [ -f "norm.txt" ]; then
#         (cpanm --local-lib=~/perl5 local::lib && eval $(perl -I ~/perl5/lib/perl5/ -Mlocal::lib); set -x; time ~/perl5/bin/diffReps.pl --treatment $Treatment_List --control $Control_List --report ${report_name} --gname mm9 --window ${WINDOW_SIZE} --nsd broad --frag ${FRAG_SIZE} --nproc $NSLOTS --norm norm.txt)
#     else
#         (cpanm --local-lib=~/perl5 local::lib && eval $(perl -I ~/perl5/lib/perl5/ -Mlocal::lib); set -x; time ~/perl5/bin/diffReps.pl --treatment $Treatment_List --control $Control_List --report ${report_name} --gname mm9 --window ${WINDOW_SIZE} --nsd broad --frag ${FRAG_SIZE} --nproc $NSLOTS)
#     fi
# fi

if [ "${NUM_REP_Control}" == "1" ] || [ "${NUM_REP_Treatment}" == "1" ]; then
    if [ -f "norm.txt" ]; then
        (set -x; time diffReps.pl --treatment $Treatment_List --control $Control_List --report ${report_name} --gname mm9 --window ${WINDOW_SIZE} --nsd broad --frag ${FRAG_SIZE} --nproc $NSLOTS --meth gt --norm "norm.txt")
    else
        (set -x; time diffReps.pl --treatment $Treatment_List --control $Control_List --report ${report_name} --gname mm9 --window ${WINDOW_SIZE} --nsd broad --frag ${FRAG_SIZE} --nproc $NSLOTS --meth gt)
    fi
else
    if [ -f "norm.txt" ]; then
        (set -x; time diffReps.pl --treatment $Treatment_List --control $Control_List --report ${report_name} --gname mm9 --window ${WINDOW_SIZE} --nsd broad --frag ${FRAG_SIZE} --nproc $NSLOTS --norm norm.txt)
    else
        (set -x; time diffReps.pl --treatment $Treatment_List --control $Control_List --report ${report_name} --gname mm9 --window ${WINDOW_SIZE} --nsd broad --frag ${FRAG_SIZE} --nproc $NSLOTS)
    fi
fi


echo 'Ending diffReps.pl'

ls -la

#Copy files back to storage
#Output files have the pattern: output_results*
cp 'diffReps_'* $OUTPUT_DIR

echo "=========================================================="
echo "Finished on : $(date)"
End_Time=$(date +"%s")
diff=$(($End_Time-$Start_Time))
echo "$(($diff / 3600)) hours, $((($diff / 60) % 60)) minutes and $(($diff % 60)) seconds elapsed."
echo "=========================================================="
echo "IAMOK"


