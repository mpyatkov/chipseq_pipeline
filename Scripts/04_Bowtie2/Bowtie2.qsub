#!/bin/bash -l
set -eu
##################################################################################
#Andy Rampersaud, 03.01.16
#This script is called by Bowtie2.sh
##################################################################################
# Specify which shell to use
#$ -S /bin/bash
# Run on the current working directory
#$ -cwd
# Expand the scratch space
#$ -l scratch_free=200G
# Join standard output and error to a single file  
#$ -j y
# change to y if you want a single qlog file 

##################################################################################
#Initialize variables from Bowtie2.sh
##################################################################################
#checking the command line arg
#-ne : "is not equal to"
if [ $# -ne 4 ] ; then
      echo "Need 4 arguments for the qsub command:"
      echo "qsub -N ${Job_Name}'_'${Sample_ID} -P waxmanlab -l h_rt=${TIME_LIMIT} Bowtie2.qsub ${Sample_ID} ${Dataset_DIR} ${Sample_Labels_DIR} ${Bowtie2Index_DIR}"
      exit 0
fi
#process the command line arguments
Sample_ID=$1
Dataset_DIR=$2
Sample_Labels_DIR=$3
Bowtie2Index_DIR=$4

#http://www.ibm.com/developerworks/library/l-bash-parameters/
#Note: If you have more than 9 parameters, you cannot use $10 to refer to the tenth one. You must first either process or save the first parameter ($1), then use the shift command to drop parameter 1 and move all remaining parameters down 1, so that $10 becomes $9 and so on.

#http://unix.stackexchange.com/questions/104420/how-to-use-command-line-arguments-in-a-shell-script
#If you need access more than 9 command line arguments, you can use the shift command. Example: shift 2 renames $3 to $1, $4 to $2 etc.

#Print variables (make sure they appear correctly):
echo "-----------------------"
echo "Start of variable list:"
echo "-----------------------"
echo "Sample_ID:"
echo ${Sample_ID}
echo "Dataset_DIR:"
echo ${Dataset_DIR}
echo "Sample_Labels_DIR:"
echo ${Sample_Labels_DIR}
echo "Bowtie2Index_DIR:"
echo ${Bowtie2Index_DIR}
echo "-----------------------"
echo "End of variable list"
echo "-----------------------"

#You can use option "-pe omp N", where N is the number of cores ( number of course on our system can be any integer between 1 and 16):
#$ -pe omp 16

# Now let's keep track of some information just in case anything goes wrong
echo "=========================================================="
#Use to calculate job time:
#Start_Time in seconds
Start_Time=$(date +"%s")
echo "Starting on : $(date)"
echo "Running on node : $(hostname)"
echo "Current directory : $(pwd)"
echo "Current job ID : $JOB_ID"
echo "Current job name : $JOB_NAME"
echo "Task index number : $SGE_TASK_ID"
echo "Parameter for multiple cores : $NSLOTS"
echo "=========================================================="

# Go to local scratch directory
echo
echo 'Change dir to scratch directory'
echo
cd ${TMPDIR}
echo
echo 'Print scratch directory location:'
echo
echo $TMPDIR
#--------------------------------------
echo
echo 'Loading required modules...'
echo
#Make sure the shebang line = #!/bin/bash -l
set -eu
#Need the -l option to load modules
#Search for latest program installed:
#module avail -t 2>&1 | grep -i boost
module load boost
#module avail -t 2>&1 | grep -i samtools
module load samtools/0.1.19
#module avail -t 2>&1 | grep -i bowtie2
#module load bowtie2/2.2.6
module load bowtie2/2.3.4.1
#--------------------------------------
#module help boost/1.54.0
#----------- Module Specific Help for 'boost/1.54.0' ---------------
#Boost provides free peer-reviewed portable C++ source libraries.
#http://www.boost.org/

#module help samtools/samtools-0.1.19_gnu446
#----------- Module Specific Help for 'samtools/samtools-0.1.19_gnu446' ---------------------------
#sets the environment for samtools (0.1.19) built using GNU Compilers
#SAM (Sequence Alignment/Map) format is a generic format for storing
#large nucleotide sequence alignments. SAM Tools provide various utilities
#for manipulating alignments in the SAM format, including sorting, merging,
#indexing and generating alignments in a per-position format.
#http://samtools.sourceforge.net/

#module help bowtie2/2.2.2
#----------- Module Specific Help for 'bowtie2/2.2.2' --------------
#Sets the environment for Bowtie2 2.2.2
#Bowtie 2 is an ultrafast and memory-efficient tool for aligning
#sequencing reads to long reference sequences. It is particularly
#good at aligning reads of about 50 up to 100s or 1,000s of characters
#and particularly good at aligning to relatively long (e.g. mammalian)
#genomes. Bowtie 2 indexes the genome with an FM Index to keep its memory
#footprint small: for the human genome, its memory footprint is typically
#around 3.2 GB. Bowtie 2 supports gapped, local, and paired-end alignment modes.
#http://bowtie-bio.sourceforge.net/bowtie2/index.shtml
#--------------------------------------

#-----------------------------------------------------
# copy user input data files to scratch
if [ -d "${Dataset_DIR}/${Sample_ID}/fastq/trim_galore_output" ]
then
    echo "COPYING TRIMMED FASTQ FILES"
    cp ${Dataset_DIR}/${Sample_ID}/fastq/trim_galore_output/*R1*.fastq.gz .
    cp ${Dataset_DIR}/${Sample_ID}/fastq/trim_galore_output/*R2*.fastq.gz .
else
    echo "COPYING NON-TRIMMED FASTQ FILES"
    cp ${Dataset_DIR}/${Sample_ID}/fastq/*R1*.fastq.gz .
    cp ${Dataset_DIR}/${Sample_ID}/fastq/*R2*.fastq.gz .
fi

#Need the Bowtie2 index:
cp -r ${Bowtie2Index_DIR}/Bowtie2Index .
#-----------------------------------------------------

#-----------------------------------------------------
#As described by Bowtie2:
#http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml
#-1 <m1>
#Comma-separated list of files containing mate 1s (filename usually includes _1), e.g. -1 flyA_1.fq,flyB_1.fq. Sequences specified with this option must correspond file-for-file and read-for-read with those specified in <m2>. Reads may be a mix of different lengths. If - is specified, bowtie2 will read the mate 1s from the "standard in" or "stdin" filehandle.
#-2 <m2>
#Comma-separated list of files containing mate 2s (filename usually includes _2), e.g. -2 flyA_2.fq,flyB_2.fq. Sequences specified with this option must correspond file-for-file and read-for-read with those specified in <m1>. Reads may be a mix of different lengths. If - is specified, bowtie2 will read the mate 2s from the "standard in" or "stdin" filehandle.
##-----------------------------------------------------
#We need a comma separated list for the *_1 ("left") set of files:
set +eu
READ1_FILE_NAME=*R1*.fastq.gz	
for i in ${READ1_FILE_NAME}; 
	do
	READ1=`echo $READ1$i,`; 
done
Left_List=${READ1%?}
echo
echo "Here is the Left_List:"
echo ${Left_List}
echo
#-----------------------------------------------------
#We need a comma separated list for the **_2 ("right") set of files:
READ2_FILE_NAME=*R2*.fastq.gz	
for i in ${READ2_FILE_NAME}; 
	do
	READ2=`echo $READ2$i,`; 
done
Right_List=${READ2%?}
echo
echo "Here is the Right_List:"
echo ${Right_List}
echo
set -eu
#-----------------------------------------------------
#Make output dir:
#Make output dir:
STORAGE_DIR=${Dataset_DIR}/${Sample_ID}/fastq
OUTPUT_DIR=$TMPDIR/bowtie2
##############################
if [[ ! -d $OUTPUT_DIR ]]; 
then
mkdir $OUTPUT_DIR
fi
##############################
echo
echo 'List files in the scratch directory:'
echo

ls -alh

echo
echo 'Starting to run my commands'
echo

#echo
#echo 'Unzip files:'
#echo

#time gzip -d *.gz

#echo
#echo 'Finished unzipping'
#echo

# run my commands.
echo
echo 'Starting bowtie2'
echo
##################################################################################
#bowtie2 --version
#/share/pkg/bowtie2/2.2.6/install/bin/bowtie2-align-s version 2.2.6
#64-bit
#Built on scc4
#Wed Jul 29 15:20:43 EDT 2015
#Compiler: gcc version 4.4.7 20120313 (Red Hat 4.4.7-3) (GCC) 
#Options: -O3 -m64 -msse2  -funroll-loops -g3 -DPOPCNT_CAPABILITY
#Sizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}
#---------------------------------------------------------------------------------
#bowtie2 -help
#Bowtie 2 version 2.2.6 by Ben Langmead (langmea@cs.jhu.edu, www.cs.jhu.edu/~langmea)
#Usage: 
#  bowtie2 [options]* -x <bt2-idx> {-1 <m1> -2 <m2> | -U <r>} [-S <sam>]

#  <bt2-idx>  Index filename prefix (minus trailing .X.bt2).
#             NOTE: Bowtie 1 and Bowtie 2 indexes are not compatible.
#  <m1>       Files with #1 mates, paired with files in <m2>.
#             Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).
#  <m2>       Files with #2 mates, paired with files in <m1>.
#             Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).
#  <r>        Files with unpaired reads.
#             Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).
#  <sam>      File for SAM output (default: stdout)

#  <m1>, <m2>, <r> can be comma-separated lists (no whitespace) and can be
#  specified many times.  E.g. '-U file1.fq,file2.fq -U file3.fq'.

#Options (defaults in parentheses):

# Input:
#  -q                 query input files are FASTQ .fq/.fastq (default)
#  --qseq             query input files are in Illumina's qseq format
#  -f                 query input files are (multi-)FASTA .fa/.mfa
#  -r                 query input files are raw one-sequence-per-line
#  -c                 <m1>, <m2>, <r> are sequences themselves, not files
#  -s/--skip <int>    skip the first <int> reads/pairs in the input (none)
#  -u/--upto <int>    stop after first <int> reads/pairs (no limit)
#  -5/--trim5 <int>   trim <int> bases from 5'/left end of reads (0)
#  -3/--trim3 <int>   trim <int> bases from 3'/right end of reads (0)
#  --phred33          qualities are Phred+33 (default)
#  --phred64          qualities are Phred+64
#  --int-quals        qualities encoded as space-delimited integers

# Presets:                 Same as:
#  For --end-to-end:
#   --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50
#   --fast                 -D 10 -R 2 -N 0 -L 22 -i S,0,2.50
#   --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)
#   --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50

#  For --local:
#   --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00
#   --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75
#   --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)
#   --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50

# Alignment:
#  -N <int>           max # mismatches in seed alignment; can be 0 or 1 (0)
#  -L <int>           length of seed substrings; must be >3, <32 (22)
#  -i <func>          interval between seed substrings w/r/t read len (S,1,1.15)
#  --n-ceil <func>    func for max # non-A/C/G/Ts permitted in aln (L,0,0.15)
#  --dpad <int>       include <int> extra ref chars on sides of DP table (15)
#  --gbar <int>       disallow gaps within <int> nucs of read extremes (4)
#  --ignore-quals     treat all quality values as 30 on Phred scale (off)
#  --nofw             do not align forward (original) version of read (off)
#  --norc             do not align reverse-complement version of read (off)
#  --no-1mm-upfront   do not allow 1 mismatch alignments before attempting to
#                     scan for the optimal seeded alignments
#  --end-to-end       entire read must align; no clipping (on)
#   OR
#  --local            local alignment; ends might be soft clipped (off)

# Scoring:
#  --ma <int>         match bonus (0 for --end-to-end, 2 for --local) 
#  --mp <int>         max penalty for mismatch; lower qual = lower penalty (6)
#  --np <int>         penalty for non-A/C/G/Ts in read/ref (1)
#  --rdg <int>,<int>  read gap open, extend penalties (5,3)
#  --rfg <int>,<int>  reference gap open, extend penalties (5,3)
#  --score-min <func> min acceptable alignment score w/r/t read length
#                     (G,20,8 for local, L,-0.6,-0.6 for end-to-end)

# Reporting:
#  (default)          look for multiple alignments, report best, with MAPQ
#   OR
#  -k <int>           report up to <int> alns per read; MAPQ not meaningful
#   OR
#  -a/--all           report all alignments; very slow, MAPQ not meaningful

# Effort:
#  -D <int>           give up extending after <int> failed extends in a row (15)
#  -R <int>           for reads w/ repetitive seeds, try <int> sets of seeds (2)

# Paired-end:
#  -I/--minins <int>  minimum fragment length (0)
#  -X/--maxins <int>  maximum fragment length (500)
#  --fr/--rf/--ff     -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)
#  --no-mixed         suppress unpaired alignments for paired reads
#  --no-discordant    suppress discordant alignments for paired reads
#  --no-dovetail      not concordant when mates extend past each other
#  --no-contain       not concordant when one mate alignment contains other
#  --no-overlap       not concordant when mates overlap at all

# Output:
#  -t/--time          print wall-clock time taken by search phases
#  --un <path>           write unpaired reads that didn't align to <path>
#  --al <path>           write unpaired reads that aligned at least once to <path>
#  --un-conc <path>      write pairs that didn't align concordantly to <path>
#  --al-conc <path>      write pairs that aligned concordantly at least once to <path>
#  (Note: for --un, --al, --un-conc, or --al-conc, add '-gz' to the option name, e.g.
#  --un-gz <path>, to gzip compress output, or add '-bz2' to bzip2 compress output.)
#  --quiet            print nothing to stderr except serious errors
#  --met-file <path>  send metrics to file at <path> (off)
#  --met-stderr       send metrics to stderr (off)
#  --met <int>        report internal counters & metrics every <int> secs (1)
#  --no-unal          supppress SAM records for unaligned reads
#  --no-head          supppress header lines, i.e. lines starting with @
#  --no-sq            supppress @SQ header lines
#  --rg-id <text>     set read group id, reflected in @RG line and RG:Z: opt field
#  --rg <text>        add <text> ("lab:value") to @RG line of SAM header.
#                     Note: @RG line only printed when --rg-id is set.
#  --omit-sec-seq     put '*' in SEQ and QUAL fields for secondary alignments.

# Performance:
#  -p/--threads <int> number of alignment threads to launch (1)
#  --reorder          force SAM output order to match order of input reads
#  --mm               use memory-mapped I/O for index; many 'bowtie's can share

# Other:
#  --qc-filter        filter out reads that are bad according to QSEQ filter
#  --seed <int>       seed for random number generator (0)
#  --non-deterministic seed rand. gen. arbitrarily instead of using read attributes
#  --version          print version information and quit
#  -h/--help          print this usage message
#---------------------------------------------------------------------------------
#Print the command:
echo "bowtie2 -p $NSLOTS -x Bowtie2Index/genome -1 ${Left_List} -2 ${Right_List} -S ${Sample_ID}'_bowtie2'.sam"
#Run the command:
bowtie2 -p $NSLOTS -x Bowtie2Index/genome -1 ${Left_List} -2 ${Right_List} -S ${Sample_ID}'_bowtie2'.sam
#---------------------------------------------------------------------------------
echo
echo 'Finished bowtie2 command'
echo
echo
echo 'Convert SAM -> BAM'
echo
#Creates a sorted BAM file from the SAM file
#samtools view -bS ${Sample_ID}'_bowtie2'.sam | samtools sort - ${Sample_ID}'_sorted'
#Don't sort the BAM file: filtering in BAM_Count job needs a un-sorted file:
samtools view -bS ${Sample_ID}'_bowtie2'.sam > ${Sample_ID}'_alignments.bam'
#---------------------------------------------------------------------------------

#####################################################
#Need to sort BAM file before generating index
#Sort BAM file
samtools sort ${Sample_ID}'_alignments.bam' ${Sample_ID}'_sorted'
#Rename the file:
mv ${Sample_ID}'_sorted.bam' ${Sample_ID}'_alignments.bam'
#Generate BAM index (Need to visulaize BAM file of reads in UCSC browser)
samtools index ${Sample_ID}'_alignments.bam'
#####################################################

echo
echo 'Copy BAM file to storage'
echo
cp ${Sample_ID}'_alignments.bam' $OUTPUT_DIR
cp *.bam.bai $OUTPUT_DIR
cp -r ${OUTPUT_DIR} ${STORAGE_DIR}

echo
echo "List files in scratch"
echo
ls -alh

echo "=========================================================="
echo "Finished on : $(date)"
#Use to calculate job time:
#End_Time in seconds
End_Time=$(date +"%s")
diff=$(($End_Time-$Start_Time))
echo "$(($diff / 3600)) hours, $((($diff / 60) % 60)) minutes and $(($diff % 60)) seconds elapsed."
echo "=========================================================="
echo "IAMOK"
