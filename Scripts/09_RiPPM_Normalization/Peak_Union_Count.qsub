#!/bin/bash -l
set -eu
##################################################################################
#Andy Rampersaud, 05.01.17
#This script is called by Run_Jobs.sh
##################################################################################
# Specify which shell to use
#$ -S /bin/bash
# Run on the current working directory
#$ -cwd

# Join standard output and error to a single file  
#$ -j y
# change to y if you want a single qlog file 

##################################################################################
#Initialize variables from Run_Jobs.sh
##################################################################################
#checking the command line arg
#-ne : "is not equal to"
if [ $# -ne 5 ] ; then
      echo "Need 5 arguments for the qsub command:"
      echo "qsub -N ${Job_Name}'_'${Sample_ID} -P waxmanlab -l h_rt=${TIME_LIMIT} Peak_Union_Count.qsub ${Sample_ID} ${Dataset_DIR} ${Sample_Labels_DIR} ${DHS_DATA} ${SCRIPT_DIR}"
      exit 0
fi
#process the command line arguments
Sample_ID=$1
Dataset_DIR=$2
Sample_Labels_DIR=$3
DHS_DATA=$4
SCRIPT_DIR=$5

#http://www.ibm.com/developerworks/library/l-bash-parameters/
#Note: If you have more than 9 parameters, you cannot use $10 to refer to the tenth one. You must first either process or save the first parameter ($1), then use the shift command to drop parameter 1 and move all remaining parameters down 1, so that $10 becomes $9 and so on.

#http://unix.stackexchange.com/questions/104420/how-to-use-command-line-arguments-in-a-shell-script
#If you need access more than 9 command line arguments, you can use the shift command. Example: shift 2 renames $3 to $1, $4 to $2 etc.

#Print variables (make sure they appear correctly):
echo "-----------------------"
echo "Start of variable list:"
echo "-----------------------"
echo "Sample_ID:"
echo ${Sample_ID}
echo "Dataset_DIR:"
echo ${Dataset_DIR}
echo "Sample_Labels_DIR:"
echo ${Sample_Labels_DIR}
echo "DHS_DATA:"
echo ${DHS_DATA}
echo "SCRIPT_DIR"
echo ${SCRIPT_DIR}
echo "-----------------------"
echo "End of variable list"
echo "-----------------------"

# Now let's keep track of some information just in case anything goes wrong
echo "=========================================================="
#Use to calculate job time:
#Start_Time in seconds
Start_Time=$(date +"%s")
echo "Starting on : $(date)"
echo "Running on node : $(hostname)"
echo "Current directory : $(pwd)"
echo "Current job ID : $JOB_ID"
echo "Current job name : $JOB_NAME"
echo "Task index number : $SGE_TASK_ID"
echo "=========================================================="

# Go to local scratch directory
echo
echo 'Change dir to scratch directory'
echo
cd ${TMPDIR}
echo
echo 'Print scratch directory location:'
echo
echo $TMPDIR
#--------------------------------------
echo
echo 'Loading required modules...'
echo
#Make sure the shebang line = #!/bin/bash -l
#Need the -l option to load modules
#Search for latest program installed:
#module avail -t 2>&1 | grep -i bedtools
module load bedtools/2.27.1
#--------------------------------------
##################################################################################
#---------------------------------------------------------------------------------
#module help  bedtools/2.26.0
#----------- Module Specific Help for 'bedtools/2.26.0' ------------
#bedtools 2.26.0 a powerful toolset for genome arithmetic
#Collectively, the bedtools utilities are a swiss-army knife of tools for a wide-range of genomics analysis tasks. The most widely-used tools enable genome arithmetic: that is, set theory on the genome. For example, bedtools allows one to intersect, merge, count, complement, and shuffle genomic intervals from multiple files in widely-used genomic file formats such as BAM, BED, GFF/GTF, VCF. While each individual tool is designed to do a relatively simple task (e.g., intersect two interval files), quite sophisticated analyses can be conducted by combining multiple bedtools operations on the UNIX command line.
#For more information on bedtools, please see http://bedtools.readthedocs.io/en/latest/
#---------------------------------------------------------------------------------
##################################################################################
#Need to copy input files
#---------------------------------------------------------------------------------
#For counting purposes, just need the fragments BED file (not the BAM file)
#The BAM file was already used for peak calling
#Should use the *_fragments.bed.gz from the *_BAM_Count job
cp ${Dataset_DIR}/${Sample_ID}/fastq/bowtie2/${Sample_ID}'_fragments.bed.gz' .
#Copy over Sample_Labels.txt text file indicating samples to use:
cp ${SCRIPT_DIR}/Sample_Labels.txt .
#Copy the Peak_Union folder:
cp -r ${SCRIPT_DIR}/Peak_Union .
#---------------------------------------------------------------------------------

#Sample specific output dir:
STORAGE_DIR=${Dataset_DIR}/${Sample_ID}/fastq/bowtie2
######################
if [ ! -d ${STORAGE_DIR} ]
then
mkdir ${STORAGE_DIR}
fi
######################

OUTPUT_DIR=${TMPDIR}/Peak_Union_Count
######################
if [ ! -d ${OUTPUT_DIR} ]
then
mkdir ${OUTPUT_DIR}
fi
######################

#Initialize variable:
Union_DIR=${TMPDIR}/Peak_Union
#Confirm Peak_Union.bed is present
echo 'Line count of Peak_Union.bed (created by MACS2 or SICER Summarize_Jobs.sh):'
wc -l ${TMPDIR}/Peak_Union/Peak_Union.bed

#Go back to compute node top folder
cd ${TMPDIR}

echo
echo 'List files in scratch directory:'
echo
ls -alh

echo
echo 'Starting to run my commands'
echo

#Save file into a variable
file_list=*_fragments.bed.gz
for read_file in $file_list;
do
echo ${read_file}
#Have to re-initialize Sample_ID due to loop over Sample_Labels.txt
Sample_ID=${read_file%\_fragments.bed.gz}
echo ${Sample_ID}
done

echo
echo 'Processing file: '${read_file}
echo

################################################################################
#Calculating the number of reads in peaks
################################################################################
echo
echo 'Starting bedtools coverage command'
echo
#Need samtools command to use a BAM file with BEDTools:
#---------------------------------------------------------------------------------
#Note:
#http://bedtools.readthedocs.org/en/latest/content/tools/coverage.html
#The bedtools coverage tool computes both the depth and breadth of coverage of features in file B on the features in file A. For example, bedtools coverage can compute the coverage of sequence alignments (file B) across 1 kilobase (arbitrary) windows (file A) tiling a genome of interest. One advantage that bedtools coverage offers is that it not only counts the number of features that overlap an interval in file A, it also computes the fraction of bases in the interval in A that were overlapped by one or more features. Thus, bedtools coverage also computes the breadth of coverage observed for each interval in A.
#---------------------------------------------------------------------------------
#To get the number of fragments (not reads) in peaks:
#BEDTools by default will count reads (not fragments)
#The way to correct this:
#https://groups.google.com/forum/#!msg/bedtools-discuss/kulRA_7Ybow/4Be6otCybZgJ
#BAM -> bedpe format -> extract fragment coordinates -> then do coverageBED
#Reads need to be sorted by name otherwise get an error:
#"marked as paired, but it's mate does not occur next to it in your BAM file. Skipping."
#---------------------------------------------------------------------------------
# coverageBed for properly-paired reads
echo 'Starting coverageBed for properly-paired reads'
bedtools coverage -a ${Union_DIR}/Peak_Union.bed -b ${Sample_ID}'_fragments.bed.gz' > ${Sample_ID}'_read_Peak_Union.out1'
echo
echo 'Ended coverageBed for properly-paired reads'
echo
#---------------------------------------------------------------------------------
echo 'Add headers to the count file'
#http://bedtools.readthedocs.io/en/latest/content/tools/coverage.html
#After each interval in A, bedtools coverage will report:
#The number of features in B that overlapped (by at least one base pair) the A interval.
#The number of bases in A that had non-zero coverage from features in B.
#The length of the entry in A.
#The fraction of bases in A that had non-zero coverage from features in B.
#---------------------------------------------------------------------------------
echo chrom $'\t'chromStart $'\t'chromEnd $'\t'Union_Peak_ID $'\t'Read_In_Peak_Count $'\t'Bases_covered_by_reads $'\t'Peak_Length $'\t'Fraction_of_peak_covered > Count_Header.txt
cat Count_Header.txt ${Sample_ID}'_read_Peak_Union.out1' > temp.out1
mv temp.out1 ${Sample_ID}'_read_Peak_Union.out1'
rm Count_Header.txt
#---------------------------------------------------------------------------------
cp ${Sample_ID}'_read_Peak_Union.out1' ${OUTPUT_DIR}

echo
echo 'Finished bedtools coverage command'
echo

########################################################
#Remove output dir from storage (running multiple times)
if [ -d ${STORAGE_DIR}/Peak_Union_Count ]; 
then
rm -r ${STORAGE_DIR}/Peak_Union_Count;
fi
########################################################
echo 'Copy OUTPUT_DIR to STORAGE_DIR'
echo "cp -r ${OUTPUT_DIR} ${STORAGE_DIR}"
cp -r ${OUTPUT_DIR} ${STORAGE_DIR}
########################################################

echo "=========================================================="
echo "tree view of compute node:"
echo "=========================================================="
#Use tree command without wildcard (avoid [error opening dir] message)
##tree -h
#---------------------------------------------------------------------------------
#-h     Print  the size of each file but in a more human readable way, e.g. appending a size letter for kilobytes (K), megabytes (M), gigabytes (G), terrabytes (T),  petabytes  (P)  and exabytes (E).
#-A     Turn on ANSI line graphics hack when printing the indentation lines.
#---------------------------------------------------------------------------------
#The (-A) option adds non-readable characters (do not use)
#---------------------------------------------------------------------------------
echo "=========================================================="
echo "Finished on : $(date)"
#Use to calculate job time:
#End_Time in seconds
End_Time=$(date +"%s")
diff=$(($End_Time-$Start_Time))
echo "$(($diff / 3600)) hours, $((($diff / 60) % 60)) minutes and $(($diff % 60)) seconds elapsed."
echo "=========================================================="
echo "IAMOK"
